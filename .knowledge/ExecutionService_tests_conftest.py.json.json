{"is_source_file": true, "format": "Python", "description": "This file contains test fixtures and mock implementations for the execution service used in pytest testing of the FastAPI application. It includes a fake in-memory repository, a mock execution service interface, and fixtures to inject these into the test environment.", "external_files": ["src.api.main", "src.models.schemas", "src.services.deps"], "external_methods": ["pytest.fixture", "pytest.fixture(scope=\"session\")", "pytest.fixture(autouse=True, scope=\"session\")", "app.dependency_overrides", "sys.modules"], "published": ["fake_execution_service", "stub_execution_service_module", "client"], "classes": [{"name": "_FakeRepo", "description": "In-memory repository to mimic database operations for testing the execution service.", "methods": ["create", "get", "update_status", "append_logs", "read_logs", "list", "stats"]}, {"name": "FakeExecutionService", "description": "A mock implementation of an execution service interface providing methods for submitting jobs, retrieving logs, and getting stats.", "methods": ["__init__", "submit", "get", "list", "logs", "stats", "uptime_seconds"]}], "methods": [{"name": "FakeExecutionService fake_execution_service()", "description": "Fixture providing a singleton instance of FakeExecutionService for tests.", "scope": "", "scopeKind": ""}, {"name": "stub_execution_service_module(fake_execution_service)", "description": "Fixture that inserts a mock src.services.execution_service module into sys.modules for dependency resolution.", "scope": "", "scopeKind": ""}, {"name": "client(fake_execution_service: FakeExecutionService)", "description": "Fixture providing a FastAPI TestClient with overridden dependency to use the fake execution service.", "scope": "", "scopeKind": ""}, {"name": "None __init__(self)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "_override()", "scope": "client", "scopeKind": "function", "description": "unavailable"}, {"name": "None append_logs(self, execution_id: str, lines: List[str])", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "ExecutionDetail create(self, req: ExecutionRequest)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[ExecutionDetail] get(self, execution_id: str)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "List[ExecutionDetail] list(self, limit: int = 50, status: Optional[ExecutionStatus] = None)", "scope": "FakeExecutionService", "scopeKind": "class", "description": "unavailable"}, {"name": "List[ExecutionDetail] list(self, limit: int, status: Optional[ExecutionStatus])", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[LogsResponse] logs(self, execution_id: str, offset: int = 0, limit: int = 200)", "scope": "FakeExecutionService", "scopeKind": "class", "description": "unavailable"}, {"name": "Tuple[List[str],int,bool] read_logs(self, execution_id: str, offset: int, limit: int)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str,int] stats(self)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "submit(self, payload: ExecutionRequest)", "scope": "FakeExecutionService", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[ExecutionDetail] update_status( self, execution_id: str, status: ExecutionStatus, result: Optional[Dict[str, Any]] = None, error: Optional[str] = None )", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "float uptime_seconds(self)", "scope": "FakeExecutionService", "scopeKind": "class", "description": "unavailable"}], "calls": ["pytest.fixture", "sys.modules", "app.dependency_overrides", "TestClient"], "search-terms": ["conftest.py", "pytest fixtures", "Fake execution service", "in-memory repository", "FastAPI testing", "dependency override", "execution service mock"], "state": 2, "file_id": 14, "knowledge_revision": 42, "git_revision": "5e5637c5872a222c0753faabadae1f6a12346a33", "revision_history": [{"34": ""}, {"41": "5e5637c5872a222c0753faabadae1f6a12346a33"}, {"42": "5e5637c5872a222c0753faabadae1f6a12346a33"}], "ctags": [{"_type": "tag", "name": "FakeExecutionService", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^class FakeExecutionService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_FakeRepo", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^class _FakeRepo:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "_override", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def _override():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "client", "scopeKind": "function"}, {"_type": "tag", "name": "append_logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def append_logs(self, execution_id: str, lines: List[str]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, execution_id: str, lines: List[str])", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "client", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def client(fake_execution_service: FakeExecutionService):$/", "language": "Python", "kind": "function", "signature": "(fake_execution_service: FakeExecutionService)"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def create(self, req: ExecutionRequest) -> ExecutionDetail:$/", "language": "Python", "typeref": "typename:ExecutionDetail", "kind": "member", "signature": "(self, req: ExecutionRequest)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "deps_module", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^from src.services import deps as deps_module$/", "language": "Python", "kind": "unknown", "nameref": "unknown:deps"}, {"_type": "tag", "name": "fake_execution_service", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def fake_execution_service() -> FakeExecutionService:$/", "language": "Python", "typeref": "typename:FakeExecutionService", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def get(self, execution_id: str) -> Optional[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "(self, execution_id: str)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def get(self, execution_id: str) -> Optional[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "(self, execution_id: str)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def list(self, limit: int = 50, status: Optional[ExecutionStatus] = None) -> List[ExecutionD/", "language": "Python", "typeref": "typename:List[ExecutionDetail]", "kind": "member", "signature": "(self, limit: int = 50, status: Optional[ExecutionStatus] = None)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def list(self, limit: int, status: Optional[ExecutionStatus]) -> List[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:List[ExecutionDetail]", "kind": "member", "signature": "(self, limit: int, status: Optional[ExecutionStatus])", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def logs(self, execution_id: str, offset: int = 0, limit: int = 200) -> Optional[LogsRespons/", "language": "Python", "typeref": "typename:Optional[LogsResponse]", "kind": "member", "signature": "(self, execution_id: str, offset: int = 0, limit: int = 200)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "read_logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def read_logs(self, execution_id: str, offset: int, limit: int) -> Tuple[List[str], int, boo/", "language": "Python", "typeref": "typename:Tuple[List[str],int,bool]", "kind": "member", "signature": "(self, execution_id: str, offset: int, limit: int)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def stats(self) -> Dict[str, int]:$/", "language": "Python", "typeref": "typename:Dict[str,int]", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def stats(self) -> Dict[str, int]:$/", "language": "Python", "typeref": "typename:Dict[str,int]", "kind": "member", "signature": "(self)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "stub_execution_service_module", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def stub_execution_service_module(fake_execution_service):$/", "language": "Python", "kind": "function", "signature": "(fake_execution_service)"}, {"_type": "tag", "name": "submit", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def submit(self, payload: ExecutionRequest):$/", "language": "Python", "kind": "member", "signature": "(self, payload: ExecutionRequest)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "update_status", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def update_status($/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "( self, execution_id: str, status: ExecutionStatus, result: Optional[Dict[str, Any]] = None, error: Optional[str] = None )", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "uptime_seconds", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def uptime_seconds(self) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}], "hash": "5575db1dcdea07893df02a5c0da353df", "format-version": 4, "code-base-name": "ExecutionService", "filename": "ExecutionService/tests/conftest.py"}