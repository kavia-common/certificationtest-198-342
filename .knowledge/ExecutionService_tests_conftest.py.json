{"is_source_file": true, "format": "Python", "description": "This file contains test fixtures and mock classes for testing the ExecutionService component within a FastAPI application. It defines a fake in-memory repository to simulate executing tasks, managing logs, and tracking execution states, along with pytest fixtures for integration testing.", "external_files": ["src.api.main", "src.models.schemas", "src.services.deps"], "external_methods": ["pytest.fixture", "pytest.fixture(scope='session')", "pytest.fixture(autouse=True, scope='session')", "app.dependency_overrides", "TestClient"], "published": ["fake_execution_service"], "classes": [{"name": "_FakeRepo", "description": "An in-memory repository mocking storage and retrieval operations for execution details and logs."}, {"name": "FakeExecutionService", "description": "A fake service implementing expected execution interface, simulating task submission, status updates, log handling, and statistics."}], "methods": [{"name": "submit(self, payload: ExecutionRequest)", "description": "Simulates submitting an execution request and transitioning the execution through queued, running, and completed states.", "scope": "FakeExecutionService", "scopeKind": "class"}, {"name": "Optional[ExecutionDetail] get(self, execution_id: str)", "description": "Retrieves execution details by ID from the in-memory store.", "scope": "_FakeRepo", "scopeKind": "class"}, {"name": "List[ExecutionDetail] list(self, limit: int = 50, status: Optional[ExecutionStatus] = None)", "description": "Lists execution details filtered by status, sorted by creation time descending.", "scope": "FakeExecutionService", "scopeKind": "class"}, {"name": "Optional[LogsResponse] logs(self, execution_id: str, offset: int = 0, limit: int = 200)", "description": "Retrieves logs for a specific execution ID with pagination support.", "scope": "FakeExecutionService", "scopeKind": "class"}, {"name": "Dict[str,int] stats(self)", "description": "Returns aggregated statistics of all stored executions.", "scope": "_FakeRepo", "scopeKind": "class"}, {"name": "float uptime_seconds(self)", "description": "Returns the uptime duration of the fake service.", "scope": "FakeExecutionService", "scopeKind": "class"}, {"name": "None __init__(self)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "_override()", "scope": "client", "scopeKind": "function", "description": "unavailable"}, {"name": "None append_logs(self, execution_id: str, lines: List[str])", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "client(fake_execution_service: FakeExecutionService)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "ExecutionDetail create(self, req: ExecutionRequest)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "FakeExecutionService fake_execution_service()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "List[ExecutionDetail] list(self, limit: int, status: Optional[ExecutionStatus])", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "Tuple[List[str],int,bool] read_logs(self, execution_id: str, offset: int, limit: int)", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}, {"name": "stub_execution_service_module(fake_execution_service)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "Optional[ExecutionDetail] update_status( self, execution_id: str, status: ExecutionStatus, result: Optional[Dict[str, Any]] = None, error: Optional[str] = None )", "scope": "_FakeRepo", "scopeKind": "class", "description": "unavailable"}], "calls": ["self._repo.create", "self._repo.update_status", "self._repo.append_logs", "self._repo.read_logs", "sys.modules"], "search-terms": ["conftest", "pytest fixtures", "FakeExecutionService", "mock repository", "dependency override", "TestClient", "FastAPI testing", "in-memory execution storage"], "state": 2, "file_id": 14, "knowledge_revision": 34, "git_revision": "", "ctags": [{"_type": "tag", "name": "FakeExecutionService", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^class FakeExecutionService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_FakeRepo", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^class _FakeRepo:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "_override", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def _override():$/", "file": true, "language": "Python", "kind": "function", "signature": "()", "scope": "client", "scopeKind": "function"}, {"_type": "tag", "name": "append_logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def append_logs(self, execution_id: str, lines: List[str]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, execution_id: str, lines: List[str])", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "client", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def client(fake_execution_service: FakeExecutionService):$/", "language": "Python", "kind": "function", "signature": "(fake_execution_service: FakeExecutionService)"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def create(self, req: ExecutionRequest) -> ExecutionDetail:$/", "language": "Python", "typeref": "typename:ExecutionDetail", "kind": "member", "signature": "(self, req: ExecutionRequest)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "deps_module", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^from src.services import deps as deps_module$/", "language": "Python", "kind": "unknown", "nameref": "unknown:deps"}, {"_type": "tag", "name": "fake_execution_service", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def fake_execution_service() -> FakeExecutionService:$/", "language": "Python", "typeref": "typename:FakeExecutionService", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def get(self, execution_id: str) -> Optional[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "(self, execution_id: str)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def get(self, execution_id: str) -> Optional[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "(self, execution_id: str)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def list(self, limit: int = 50, status: Optional[ExecutionStatus] = None) -> List[ExecutionD/", "language": "Python", "typeref": "typename:List[ExecutionDetail]", "kind": "member", "signature": "(self, limit: int = 50, status: Optional[ExecutionStatus] = None)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def list(self, limit: int, status: Optional[ExecutionStatus]) -> List[ExecutionDetail]:$/", "language": "Python", "typeref": "typename:List[ExecutionDetail]", "kind": "member", "signature": "(self, limit: int, status: Optional[ExecutionStatus])", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def logs(self, execution_id: str, offset: int = 0, limit: int = 200) -> Optional[LogsRespons/", "language": "Python", "typeref": "typename:Optional[LogsResponse]", "kind": "member", "signature": "(self, execution_id: str, offset: int = 0, limit: int = 200)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "read_logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def read_logs(self, execution_id: str, offset: int, limit: int) -> Tuple[List[str], int, boo/", "language": "Python", "typeref": "typename:Tuple[List[str],int,bool]", "kind": "member", "signature": "(self, execution_id: str, offset: int, limit: int)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def stats(self) -> Dict[str, int]:$/", "language": "Python", "typeref": "typename:Dict[str,int]", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "stats", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def stats(self) -> Dict[str, int]:$/", "language": "Python", "typeref": "typename:Dict[str,int]", "kind": "member", "signature": "(self)", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "stub_execution_service_module", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^def stub_execution_service_module(fake_execution_service):$/", "language": "Python", "kind": "function", "signature": "(fake_execution_service)"}, {"_type": "tag", "name": "submit", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def submit(self, payload: ExecutionRequest):$/", "language": "Python", "kind": "member", "signature": "(self, payload: ExecutionRequest)", "scope": "FakeExecutionService", "scopeKind": "class"}, {"_type": "tag", "name": "update_status", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def update_status($/", "language": "Python", "typeref": "typename:Optional[ExecutionDetail]", "kind": "member", "signature": "( self, execution_id: str, status: ExecutionStatus, result: Optional[Dict[str, Any]] = None, error: Optional[str] = None )", "scope": "_FakeRepo", "scopeKind": "class"}, {"_type": "tag", "name": "uptime_seconds", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/tests/conftest.py", "pattern": "/^    def uptime_seconds(self) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "member", "signature": "(self)", "scope": "FakeExecutionService", "scopeKind": "class"}], "hash": "2eebc8c8a02277f6ff2096f33994dd54", "format-version": 4, "code-base-name": "ExecutionService", "filename": "ExecutionService/tests/conftest.py", "revision_history": [{"34": ""}]}