{"is_source_file": true, "format": "Python", "description": "This file defines API endpoints for managing and retrieving execution-related data, including submitting new executions, retrieving details of specific executions, listing executions, and fetching execution logs. It employs FastAPI routing and depends on an execution service for core logic.", "external_files": ["...models/schemas.py", "...services/deps.py", "...services/execution_service.py"], "external_methods": ["get_execution_service", "ExecutionService.submit", "ExecutionService.get", "ExecutionService.list", "ExecutionService.logs"], "published": ["APIRouter", "submit_execution", "get_execution", "list_executions", "get_execution_logs"], "classes": [], "methods": [{"name": "submit_execution( payload: ExecutionRequest, svc: ExecutionService = Depends(get_execution_service), )", "description": "Handles the submission of a new execution request, delegating to the execution service to process and return a submission response.", "scope": "", "scopeKind": ""}, {"name": "get_execution( execution_id: str, svc: ExecutionService = Depends(get_execution_service), )", "description": "Retrieves detailed information about a specific execution, raising a 404 error if not found.", "scope": "", "scopeKind": ""}, {"name": "list_executions( status: Optional[ExecutionStatus] = Query(None, description=\"Optional filter by status.\"), limit: int = Query(50, ge=1, le=200, description=\"Number of records to return.\"), svc: ExecutionService = Depends(get_execution_service), )", "description": "Lists recent executions with optional filtering by status.", "scope": "", "scopeKind": ""}, {"name": "get_execution_logs( execution_id: str, offset: int = Query(0, ge=0, description=\"Starting offset to read logs from.\"), limit: int = Query(200, ge=1, le=1000, description=\"Max number of lines to return.\"), svc: ExecutionService = Depends(get_execution_service), )", "description": "Fetches logs for a specific execution with support for pagination via offset and limit, raising a 404 if the execution does not exist.", "scope": "", "scopeKind": ""}], "calls": ["svc.submit", "svc.get", "svc.list", "svc.logs"], "search-terms": ["APIRouter", "submit_execution", "get_execution", "list_executions", "get_execution_logs", "execution_id", "execution_service", "logs", "schemas", "FastAPI", "endpoint"], "state": 2, "file_id": 8, "knowledge_revision": 18, "git_revision": "", "ctags": [{"_type": "tag", "name": "get_execution", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/src/api/routers/executions.py", "pattern": "/^def get_execution($/", "language": "Python", "kind": "function", "signature": "( execution_id: str, svc: ExecutionService = Depends(get_execution_service), )"}, {"_type": "tag", "name": "get_execution_logs", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/src/api/routers/executions.py", "pattern": "/^def get_execution_logs($/", "language": "Python", "kind": "function", "signature": "( execution_id: str, offset: int = Query(0, ge=0, description=\"Starting offset to read logs from.\"), limit: int = Query(200, ge=1, le=1000, description=\"Max number of lines to return.\"), svc: ExecutionService = Depends(get_execution_service), )"}, {"_type": "tag", "name": "list_executions", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/src/api/routers/executions.py", "pattern": "/^def list_executions($/", "language": "Python", "kind": "function", "signature": "( status: Optional[ExecutionStatus] = Query(None, description=\"Optional filter by status.\"), limit: int = Query(50, ge=1, le=200, description=\"Number of records to return.\"), svc: ExecutionService = Depends(get_execution_service), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/src/api/routers/executions.py", "pattern": "/^router = APIRouter(prefix=\"\\/executions\", tags=[\"executions\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "submit_execution", "path": "/home/kavia/workspace/code-generation/certificationtest-198-342/ExecutionService/src/api/routers/executions.py", "pattern": "/^def submit_execution($/", "language": "Python", "kind": "function", "signature": "( payload: ExecutionRequest, svc: ExecutionService = Depends(get_execution_service), )"}], "hash": "1e259649017387b237770779e06b84e9", "format-version": 4, "code-base-name": "ExecutionService", "filename": "ExecutionService/src/api/routers/executions.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/executions\", tags=[\"executions\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"18": ""}]}